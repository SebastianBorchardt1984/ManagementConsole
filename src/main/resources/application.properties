#Quarkus Port und CORS Einstellungen für REST API und Zugriffe von anderen Domains. Aktuell wird alles erlaubt, muss später eingeschränkt werden wahrscheinlich
quarkus.http.port=8080
quarkus.http.cors=true
quarkus.http.cors.origins=/.*/,*


#Quarkus Swagger UI immer anzeigen -> http://localhost:8080/q/swagger-ui/
quarkus.swagger-ui.always-include=true
quarkus.package.type=uber-jar

#Quarkus Kogito Data Index UI für Graphql immer anzeigen -> http://localhost:8080/q/graphql-ui/
quarkus.kogito.data-index.graphql.ui.always-include=true

#Quarkus Devservices deaktivieren damit keine Test-Container gestartet werden (z.B. Datenbank). Sobald wir Virtualisierung nutzen können, können wir das wieder aktivieren für einfachere Entwicklung
quarkus.kogito.devservices.enabled=false
quarkus.devservices.enabled=false
#quarkus.package.jar.type=legacy-jar
#quarkus.package.type=uber-jar
#Quarkus Datasource für Verbidung mit Datenbank
quarkus.flyway.migrate-at-start=true
#quarkus.flyway.baseline-on-migrate=true
#quarkus.flyway.baseline-version=0.0
#quarkus.flyway.locations=classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql
#quarkus.flyway.table=FLYWAY_RUNTIME_SERVICE
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=kogito
quarkus.datasource.password=kogito
quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql-persistent.ano-prd-kogito.svc.cluster.local:5432/kogito
quarkus.datasource.reactive.url=postgresql://postgresql-persistent.ano-prd-kogito.svc.cluster.local:5432/kogito

quarkus.oidc.enabled=false

#Kogito Service und Data Index URL für Verbindung
# Kogito-service
kogito.service.url=https://axxxxx_prozess-ano-prd-kogito.apps.ocp09.d100.loc

#Job-service
kogito.jobs-service.url=https://axxxxx_prozess-ano-prd-kogito.apps.ocp09.d100.loc

#kogito.service.url=http://localhost:8080
kogito.dataindex.http.url=https://axxxxx_prozess-ano-prd-kogito.apps.ocp09.d100.loc/graphql
kogito.dataindex.ws.url=ws://axxxxx_prozess-ano-prd-kogito.apps.ocp09.d100.loc/graphql

#Kogito Persistence Config
kogito.apps.persistence.type=postgresql
kogito.persistence.type=jdbc
kogito.persistence.query.timeout.millis=100000


# #HTTP-Message-Connector
# mp.messaging.incoming.falleingang.connector=quarkus-http
# mp.messaging.incoming.falleingang.path=/falleingang
# mp.messaging.incoming.falleingang.method=POST

# #HTTP-Message-Connector
# mp.messaging.incoming.anspruch_ermitteln.connector=quarkus-http
# mp.messaging.incoming.anspruch_ermitteln.path=/anspruch_ermitteln
# mp.messaging.incoming.anspruch_ermitteln.method=POST


# #HTTP-Message-Connector
# mp.messaging.incoming.merkmal_speichern.connector=quarkus-http
# mp.messaging.incoming.merkmal_speichern.path=/merkmal_speichern
# mp.messaging.incoming.merkmal_speichern.method=POST

# #HTTP-Message-Connector
# mp.messaging.incoming.fall_erfolgreich.connector=quarkus-http
# mp.messaging.incoming.fall_erfolgreich.path=/fall_erfolgreich
# mp.messaging.incoming.fall_erfolgreich.method=POST


# #HTTP-Message-Connector
# mp.messaging.incoming.fall_businessexception.connector=quarkus-http
# mp.messaging.incoming.fall_businessexception.path=/fall_businessexception
# mp.messaging.incoming.fall_businessexception.method=POST

# #HTTP-Message-Connector
# mp.messaging.incoming.fall_applicationexception.connector=quarkus-http
# mp.messaging.incoming.fall_applicationexception.path=/fall_applicationexception
# mp.messaging.incoming.fall_applicationexception.method=POST

# #HTTP-Message-Connector
# mp.messaging.incoming.uipath_verbucher.connector=quarkus-http
# mp.messaging.incoming.uipath_verbucher.path=/uipath_verbucher
# mp.messaging.incoming.uipath_verbucher.method=POST

#Loglevel
quarkus.log.console.enable=true
quarkus.log.console.level=INFO
quarkus.log.level=INFO
